{"version":3,"sources":["components/Constants.js","components/Output.js","components/Input.js","App.js","reportWebVitals.js","index.js"],"names":["ENDPOINT","ID","Date","getTime","Output","movieName","movieId","useState","clicked","setClicked","sliderValue","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","Slider","defaultValue","getAriaValueText","value","aria-labelledby","step","marks","min","max","onChange","event","valueLabelDisplay","disabled","ListItemSecondaryAction","IconButton","edge","aria-label","onClick","mid","fetch","CONS","then","res","setTimeout","Math","random","catch","error","sendMovieRating","Tooltip","title","CircularProgress","size","Input","loading","setLoading","recommendMovies","setRecommendedMovies","allMovie","setAllMovie","analyzingMovie","setAnalyzingMovie","useEffect","lst","response","text","data","a","csv","readString","arr","shift","forEach","e","name","push","label","getAllMovies","filterOptions","createFilterOptions","limit","className","Autocomplete","id","options","getOptionLabel","option","style","width","movie","json","renderInput","params","TextField","variant","Container","maxWidth","List","map","item","Title","Id","App","href","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c0a3684.chunk.js","sourcesContent":[" export const ENDPOINT = \"https://gc-movie-recommender.herokuapp.com/movie/\";\n // export const ENDPOINT = \"http://127.0.0.1:5000/movie/\";\n export const URL = \"https://gc-movie-recommender.herokuapp.com/get-all-movies\";\n// export const URL = \"http://localhost:5000/get-all-movies\"\n export const ID = new Date().getTime();","\nimport '../App.css';\nimport React, { useState } from 'react';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Movie from '@material-ui/icons/Movie';\nimport SendIcon from '@material-ui/icons/Send';\nimport Slider from '@material-ui/core/Slider';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { CircularProgress } from '@material-ui/core';\nimport * as CONS from './Constants.js'\nimport ErrorOutline from '@material-ui/icons/ErrorOutline';\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst Output = ({movieName, movieId}) => {\n  \n  const [clicked, setClicked] = useState(0);\n  let sliderValue = 3;\n  function valuetext(value) {\n    return `${value}`;\n  }\n\n  const sendMovieRating = (mid, value) => {\n    try {\n      if (!movieId) {\n          return\n      }\n      setClicked(1)\n      fetch(CONS.ENDPOINT+'add/'+CONS.ID+'/'+mid+'/'+value)\n      .then( res => {\n        setTimeout(() => { setClicked(2) }, Math.random() * 1000);\n      }).catch(function() {\n        setClicked(3)\n      })\n    } catch(error) {\n      setClicked(3)\n    }\n  }\n\n  const marks = [\n    {\n      value: 0,\n      label: '0',\n    },\n    {\n      value: 1,\n      label: '1',\n    },\n    {\n      value: 2,\n      label: '2',\n    },\n    {\n      value: 3,\n      label: '3',\n    },\n    {\n      value: 4,\n      label: '4',\n    },\n    {\n      value: 5,\n      label: '5',\n    },\n  ];\n \n    return (\n\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar>\n              <Movie />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={ movieName }\n            secondary= {<Slider\n              defaultValue={3}\n              getAriaValueText={valuetext}\n              aria-labelledby=\"discrete-slider-small-steps\"\n              step={1}\n              marks\n              min={0}\n              max={5}\n              onChange = { (event, value) => { sliderValue = value;}}\n              valueLabelDisplay=\"auto\"\n              disabled = {clicked !== 0}\n            />}\n          />\n          <ListItemSecondaryAction>\n            {clicked === 0 && <IconButton edge=\"end\" aria-label=\"send\" onClick={() => { sendMovieRating(movieId, sliderValue) }}>\n            <Tooltip title=\"Send rating\">\n              <SendIcon />\n              </Tooltip>\n            </IconButton> }\n            {clicked === 1 &&  <CircularProgress size={ 30 } /> }\n            {clicked === 2 &&  <DoneOutlineIcon /> }\n            {clicked === 3 &&  <ErrorOutline /> }\n          </ListItemSecondaryAction>\n        </ListItem>\n      \n    );\n}\n\nexport default Output;","\nimport '../App.css';\nimport React, { useEffect, useState } from 'react';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { CircularProgress, LinearProgress } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { readString } from 'react-papaparse'\nimport List from '@material-ui/core/List';\nimport Container from '@material-ui/core/Container';\nimport Output from './Output'\nimport * as CONS from './Constants.js'\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nconst Input = () => {\n\n    const [loading, setLoading] = useState(true);\n    const [recommendMovies, setRecommendedMovies] = useState([]);\n    const [allMovie, setAllMovie] = useState([]);\n    const [analyzingMovie, setAnalyzingMovie] = useState(0)\n    const mySubmitHandler =  (event, movie) => {\n        try {\n            if (!movie) {\n                return\n            }\n            setAnalyzingMovie(1)\n            fetch(CONS.ENDPOINT+movie.label)\n            .then(response => response.json())\n            .then( data => {\n               \n                setRecommendedMovies(data)\n                setTimeout(() => {   setAnalyzingMovie(2) }, 1000);\n            }).catch(function() {\n                setAnalyzingMovie(3)\n            })\n        } catch(error) {\n            setAnalyzingMovie(3)\n        }\n    }\n\n   \n\n    const getAllMovies =  () => {\n\n        const lst = []\n        fetch(CONS.URL)\n        .then(response => response.text())\n        .then( async data => {\n            setLoading(true)\n            const csv = readString(data)\n            const arr = csv.data;\n            arr.shift();\n            arr.forEach( (e) => {\n                 const name = e[1];\n                 if (e[1]) {\n                     lst.push( { label : name } );\n                }\n            });\n            setAllMovie(lst);\n            setTimeout(() => { setLoading(false) }, 1500);\n        \n        });\n    };\n\n    useEffect( () => {\n     getAllMovies()\n    }, [])\n\n    const filterOptions = createFilterOptions({\n        limit: 50,\n      });\n      \n    return (\n        <div>\n        { loading && <div className='center'><CircularProgress/><h2>Loading movie titles ...</h2></div>}\n        { !loading && <div>\n            <form>\n            <Autocomplete\n                id=\"combo-box-demo\"\n                filterOptions={filterOptions}\n                options={allMovie}\n                getOptionLabel={(option) => option.label}\n                style={{ width: 300 }}\n                onChange={mySubmitHandler}\n                renderInput={(params) => <TextField {...params} label=\"Enter your favorite movie\" variant=\"outlined\" />}\n                />\n            </form>\n            { analyzingMovie === 1 && <div className=\"center\"> <CircularProgress /> Looking for movies you may like ...</div>}\n            { analyzingMovie === 2 && <div>\n            <div className=\"center\"> We think you will like these movies. Help us improve the predictions by sending your ratings.</div>\n            <div className='recommend-body'>\n            <Container maxWidth=\"sm\">\n                <List >\n                    {recommendMovies.map( (item) => {\n                         if (item && item.Title) {\n                            return <Output movieName={item.Title } movieId={item.Id} key={item.Title}></Output>\n                         }\n                         return <div></div>\n                    })}\n                </List>\n                </Container>\n            </div></div>}\n            { analyzingMovie === 3 && <div className=\"center\"> <ErrorOutlineIcon/> Error. Please try again</div>} \n        </div>}\n      </div>\n    );\n}\n\nexport default Input;","import './App.css';\nimport React from 'react';\nimport Input from './components/Input';\nimport 'font-awesome/css/font-awesome.min.css'; \n\nfunction App() {\n\n  \n  return (\n    \n    <div className=\"body-card\">\n  \n      <header>\n        Movie Recommender\n      </header>\n      < Input />\n\n      <div className=\"footer\">\n        <div>Movie data source: <a href='http://files.grouplens.org/datasets/movielens/ml-latest-small-README.html' target=\"_blank\">GroupLens</a></div>\n      </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}